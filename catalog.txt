#include <iostream>
#include <vector>
#include <map>
#include <cmath>
using namespace std;

// Helper function to decode y-value given its base
int decodeValue(const string& value, int base) {
    int result = 0;
    for (char digit : value) {
        result = result * base + (digit - '0');
    }
    return result;
}

// Gaussian Elimination to solve linear system
vector<double> gaussianElimination(vector<vector<double>> A, vector<double> b) {
    int n = A.size();

    for (int i = 0; i < n; i++) {
        // Partial pivoting
        int maxRow = i;
        for (int k = i + 1; k < n; k++) {
            if (abs(A[k][i]) > abs(A[maxRow][i])) {
                maxRow = k;
            }
        }

        // Swap rows in A
        swap(A[i], A[maxRow]);
        // Swap values in b
        swap(b[i], b[maxRow]);

        // Make all rows below this one 0 in current column
        for (int k = i + 1; k < n; k++) {
            double c = -A[k][i] / A[i][i];
            for (int j = i; j < n; j++) {
                if (i == j) {
                    A[k][j] = 0;
                } else {
                    A[k][j] += c * A[i][j];
                }
            }
            b[k] += c * b[i];
        }
    }

    // Solve equation Ax=b for an upper triangular matrix A
    vector<double> x(n);
    for (int i = n - 1; i >= 0; i--) {
        x[i] = b[i] / A[i][i];
        for (int k = i - 1; k >= 0; k--) {
            b[k] -= A[k][i] * x[i];
        }
    }
    return x;
}

int main() {
    // Example input in the given format
    map<int, pair<int, string>> input = {
        {1, {10, "4"}},
        {2, {2, "111"}},
        {3, {10, "12"}},
        {6, {4, "213"}}
    };

    int n = 4, k = 3; // n is the number of points, k is the minimum required roots

    // Collect points (x, y) pairs
    vector<pair<int, int>> points;

    for (const auto& p : input) {
        int x = p.first;
        int base = p.second.first;
        string value = p.second.second;
        int y = decodeValue(value, base);
        points.push_back({x, y});
    }

    // Build the matrix A and vector b for Ax = b
    vector<vector<double>> A(k, vector<double>(k));
    vector<double> b(k);

    for (int i = 0; i < k; i++) {
        int x = points[i].first;
        b[i] = points[i].second;
        for (int j = 0; j < k; j++) {
            A[i][j] = pow(x, j);
        }
    }

    // Solve the system using Gaussian elimination
    vector<double> coefficients = gaussianElimination(A, b);

    // The constant term c is the first coefficient
    double constantTerm = coefficients[0];
    cout << "The constant term is: " << constantTerm << endl;

    return 0;
}

